{
  "name": "All",
  "on": {
    "push": {
      "paths-ignore": [
        "readme.md",
        "LICENSE"
      ]
    },
    "pull_request": {
      "paths-ignore": [
        "readme.md",
        "LICENSE"
      ]
    }
  },
  "jobs": {
    "test": {
      "strategy": {
        "matrix": {
          "include": [
            {
              "os": "ubuntu-latest"
            },
            {
              "os": "windows-latest"
            }
          ]
        }
      },
      "runs-on": "${{ matrix.os }}",
      "steps": [
        {
          "name": "checkout",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "install dependencies",
          "if": "matrix.os == 'ubuntu-latest'",
          "env": {
            "DEBIAN_FRONTEND": "noninteractive"
          },
          "run": "sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential pkg-config libasound2-dev"
        },
        {
          "name": "setup rust",
          "run": "rustup update"
        },
        {
          "name": "run tests",
          "run": "cargo test --features 'fluid-bundled,system'"
        }
      ]
    },
    "build": {
      "name": "Build Release Binaries",
      "needs": "test",
      "if": "github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')",
      "env": {
          "CFLAGS": "-Os -g0",
          "XXFLAGS": "-Os -g0",
      },
      "continue-on-error": true,
      "strategy": {
        "fail-fast": true,
        "matrix": {
          "include": [
            {
              "target": "x86_64-pc-windows-msvc",
              "file": "plmidi-x86_64-pc-windows-msvc.zip",
              "os": "windows-latest",
              "cross": false
            },
            {
              "target": "aarch64-pc-windows-msvc",
              "file": "plmidi-aarch64-pc-windows-msvc.zip",
              "os": "windows-latest",
              "cross": false
            },
            {
              "target": "i686-pc-windows-msvc",
              "file": "plmidi-i686-pc-windows-msvc.zip",
              "os": "windows-latest",
              "cross": false
            },
            {
              "target": "x86_64-apple-darwin",
              "file": "plmidi-x86_64-apple-darwin.tar.gz",
              "os": "macos-latest",
              "cross": false
            },
            {
              "target": "aarch64-apple-darwin",
              "file": "plmidi-aarch64-apple-darwin.tar.gz",
              "os": "macos-latest",
              "cross": false
            },
            {
              "target": "x86_64-unknown-linux-musl",
              "file": "plmidi-x86_64-unknown-linux-musl.tar.gz",
              "os": "ubuntu-latest",
              "cross": true
            },
            {
              "target": "x86_64-unknown-linux-gnu",
              "file": "plmidi-x86_64-unknown-linux-gnu.tar.gz",
              "os": "ubuntu-latest",
              "cross": false
            },
            {
              "target": "aarch64-unknown-linux-musl",
              "file": "plmidi-aarch64-unknown-linux-musl.tar.gz",
              "os": "ubuntu-latest",
              "cross": true
            },
            {
              "target": "aarch64-unknown-linux-gnu",
              "file": "plmidi-aarch64-unknown-linux-gnu.tar.gz",
              "os": "ubuntu-latest",
              "cross": true
            },
            {
              "target": "armv7-unknown-linux-musleabihf",
              "file": "plmidi-armv7-unknown-linux-musleabihf.tar.gz",
              "os": "ubuntu-latest",
              "cross": true
            },
            {
              "target": "armv7-unknown-linux-gnueabihf",
              "file": "plmidi-armv7-unknown-linux-gnueabihf.tar.gz",
              "os": "ubuntu-latest",
              "cross": true
            }
          ]
        }
      },
      "runs-on": "${{ matrix.os }}",
      "steps": [
        {
          "name": "checkout",
          "uses": "actions/checkout@v4"
        },
        {
          "name": "cache cargo",
          "uses": "actions/cache@v4",
          "with": {
            "path": "~/.cargo/registry\n~/.cargo/git\n",
            "key": "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
          }
        },
        {
          "name": "install dependencies",
          "if": "matrix.target == 'x86_64-unknown-linux-gnu'",
          "env": {
            "DEBIAN_FRONTEND": "noninteractive"
          },
          "run": "sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential pkg-config libasound2-dev"
        },
        {
          "name": "setup rust",
          "run": "rustup update && rustup default nightly && rustup target add ${{ matrix.target }} && rustup component add rust-src"
        },
        {
          "name": "install cross",
          "if": "matrix.cross",
          "run": "cargo install cross"
        },
        {
          "name": "build native windows",
          "if": "!matrix.cross && contains(matrix.os, 'windows')",
          "run": "cargo rustc -rq --features 'system,fluid-bundled,fluid-use-bindgen' --target ${{ matrix.target }} -Z 'build-std=core,alloc,std,panic_abort' -- -Copt-level=s"
        },
        {
          "name": "build native ${{ matrix.os }}",
          "if": "!matrix.cross",
          "run": "cargo rustc -rq --features 'system,fluid-bundled,fluid-use-bindgen' --target ${{ matrix.target }} -Z 'build-std=core,alloc,std,panic_abort' -- -Copt-level=s"
        },
        {
          "name": "cross build",
          "if": "matrix.cross",
          "run": "cross rustc -rq --features 'system,fluid-bundled,fluid-use-bindgen' --target ${{ matrix.target }} -Z 'build-std=core,alloc,std,panic_abort' -- -Copt-level=s"
        },
        {
          "name": "prepare artifacts",
          "if": "matrix.os != 'windows-latest'",
          "run": "cd target/${{ matrix.target }}/release && tar -czf ../../../${{ matrix.file }} plmidi && cd -"
        },
        {
          "name": "prepare artifacts",
          "if": "matrix.os == 'windows-latest'",
          "run": "cd target/${{ matrix.target }}/release\n 7z -bso0 -bsp0 a ../../../${{ matrix.file }} plmidi.exe\n cd -"
        },
        {
          "name": "upload artifacts",
          "uses": "actions/upload-artifact@v4",
          "with": {
            "name": "${{ matrix.file }}",
            "path": "${{ matrix.file }}"
          }
        }
      ]
    },
    "release": {
      "name": "Create GitHub Release",
      "needs": "build",
      "if": "github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')",
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "checkout",
          "uses": "actions/checkout@v4",
          "with": {
            "fetch-depth": 0
          }
        },
        {
          "name": "download artifacts",
          "uses": "actions/download-artifact@v4",
          "with": {
            "path": "./artifacts"
          }
        },
        {
          "name": "create github release",
          "env": {
            "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
          },
          "run": "gh release create ${{ github.ref_name }} ./artifacts/*/* --generate-notes --title ${{ github.ref_name }}"
        }
      ]
    }
  }
}
